// <auto-generated />
using System;
using Aeropuerto.Controler;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Aeropuerto.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20240515203909_ALTERTABLE")]
    partial class ALTERTABLE
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Aeropuerto.Controler.Flight", b =>
                {
                    b.Property<int>("IDFlight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDFlight"));

                    b.Property<string>("ArriveTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Destinity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("departureTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IDFlight");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Aeropuerto.Controler.Reservation", b =>
                {
                    b.Property<int>("IdReservation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdReservation"));

                    b.Property<int>("FlightID")
                        .HasColumnType("integer");

                    b.Property<string>("UserCI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("seatNumber")
                        .HasColumnType("integer");

                    b.HasKey("IdReservation");

                    b.HasIndex("FlightID");

                    b.HasIndex("UserCI");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Aeropuerto.Controler.Role", b =>
                {
                    b.Property<int>("IDRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDRole"));

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserCI")
                        .HasColumnType("text");

                    b.HasKey("IDRole");

                    b.HasIndex("UserCI")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Aeropuerto.Controler.Seat", b =>
                {
                    b.Property<int>("IDSeat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDSeat"));

                    b.Property<int>("IDFlight")
                        .HasColumnType("integer");

                    b.Property<int>("seatNumber")
                        .HasColumnType("integer");

                    b.HasKey("IDSeat");

                    b.HasIndex("IDFlight");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("Aeropuerto.Controler.UserModel", b =>
                {
                    b.Property<string>("CI")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CI");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Aeropuerto.Controler.Reservation", b =>
                {
                    b.HasOne("Aeropuerto.Controler.Flight", "flight")
                        .WithMany("Freservations")
                        .HasForeignKey("FlightID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aeropuerto.Controler.UserModel", "userModel")
                        .WithMany("reservations")
                        .HasForeignKey("UserCI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("flight");

                    b.Navigation("userModel");
                });

            modelBuilder.Entity("Aeropuerto.Controler.Role", b =>
                {
                    b.HasOne("Aeropuerto.Controler.UserModel", "userModel")
                        .WithOne("rol")
                        .HasForeignKey("Aeropuerto.Controler.Role", "UserCI");

                    b.Navigation("userModel");
                });

            modelBuilder.Entity("Aeropuerto.Controler.Seat", b =>
                {
                    b.HasOne("Aeropuerto.Controler.Flight", "flight")
                        .WithMany("Seats")
                        .HasForeignKey("IDFlight")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("flight");
                });

            modelBuilder.Entity("Aeropuerto.Controler.Flight", b =>
                {
                    b.Navigation("Freservations");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Aeropuerto.Controler.UserModel", b =>
                {
                    b.Navigation("reservations");

                    b.Navigation("rol");
                });
#pragma warning restore 612, 618
        }
    }
}
